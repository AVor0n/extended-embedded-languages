{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "injectionSelector": "L:source.yaml -string -comment",
  "scopeName": "source.javascript.embedded.codeblock",
  "patterns": [
    {
      "include": "#block-scalar-with-embedding"
    }
  ],
  "repository": {
    "block-scalar-with-embedding": {
      "comment": "These patterns all match YAML block scalar strings and select one language.The syntax is injected into https://github.com/microsoft/vscode/blob/main/extensions/yaml/syntaxes/yaml.tmLanguage.json",
      "patterns": [
        {
          "comment": "Batch-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?:(\\|)|(>))([1-9])?([-+])?\\s*(#(?i:undefined))\\b\\s*\\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "^([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.batchfile"
                }
              ],
              "name": "meta.embedded.string.raw.bat.yaml"
            }
          ]
        },
        {
          "comment": "C++-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?:(\\|)|(>))([1-9])?([-+])?\\s*(#(?i:undefined))\\b\\s*\\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "^([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.cpp"
                }
              ],
              "name": "meta.embedded.string.raw.cpp.yaml"
            }
          ]
        },
        {
          "comment": "CSS-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?:(\\|)|(>))([1-9])?([-+])?\\s*(#(?i:undefined))\\b\\s*\\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "^([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.css"
                }
              ],
              "name": "meta.embedded.string.raw.css.yaml"
            }
          ]
        },
        {
          "comment": "HTML-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?:(\\|)|(>))([1-9])?([-+])?\\s*(#(?i:undefined))\\b\\s*\\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "^([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "text.html.derivative"
                }
              ],
              "name": "meta.embedded.string.raw.html.yaml"
            }
          ]
        },
        {
          "comment": "INI-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?:(\\|)|(>))([1-9])?([-+])?\\s*(#(?i:undefined))\\b\\s*\\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "^([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.ini"
                }
              ],
              "name": "meta.embedded.string.raw.ini.yaml"
            }
          ]
        },
        {
          "comment": "Javascript-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?:(\\|)|(>))([1-9])?([-+])?\\s*(#(?i:undefined))\\b\\s*\\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "^([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.js"
                }
              ],
              "name": "meta.embedded.string.raw.javascript.yaml"
            }
          ]
        },
        {
          "comment": "JSON-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?:(\\|)|(>))([1-9])?([-+])?\\s*(#(?i:undefined))\\b\\s*\\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "^([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.json"
                }
              ],
              "name": "meta.embedded.string.raw.json.yaml"
            }
          ]
        },
        {
          "comment": "JSONC-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?:(\\|)|(>))([1-9])?([-+])?\\s*(#(?i:undefined))\\b\\s*\\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "^([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.jsonc"
                }
              ],
              "name": "meta.embedded.string.raw.jsonc.yaml"
            }
          ]
        },
        {
          "comment": "Python-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?:(\\|)|(>))([1-9])?([-+])?\\s*(#(?i:undefined))\\b\\s*\\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "^([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.python"
                }
              ],
              "name": "meta.embedded.string.raw.python.yaml"
            }
          ]
        },
        {
          "comment": "Shell-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?:(\\|)|(>))([1-9])?([-+])?\\s*(#(?i:undefined))\\b\\s*\\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "^([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.shell"
                }
              ],
              "name": "meta.embedded.string.raw.shell.yaml"
            }
          ]
        },
        {
          "comment": "SQL-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?:(\\|)|(>))([1-9])?([-+])?\\s*(#(?i:undefined))\\b\\s*\\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "^([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.sql"
                }
              ],
              "name": "meta.embedded.string.raw.sql.yaml"
            }
          ]
        },
        {
          "comment": "TOML-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?:(\\|)|(>))([1-9])?([-+])?\\s*(#(?i:undefined))\\b\\s*\\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "^([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.toml"
                }
              ],
              "name": "meta.embedded.string.raw.toml.yaml"
            }
          ]
        },
        {
          "comment": "XML-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?:(\\|)|(>))([1-9])?([-+])?\\s*(#(?i:undefined))\\b\\s*\\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "^([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "text.xml"
                }
              ],
              "name": "meta.embedded.string.raw.xml.yaml"
            }
          ]
        },
        {
          "comment": "YAML-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?:(\\|)|(>))([1-9])?([-+])?\\s*(#(?i:undefined))\\b\\s*\\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "^([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.yaml"
                }
              ],
              "name": "meta.embedded.string.raw.yaml.yaml"
            }
          ]
        },
        {
          "comment": "C-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?:(\\|)|(>))([1-9])?([-+])?\\s*(#(?i:undefined))\\b\\s*\\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "^([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.c"
                }
              ],
              "name": "meta.embedded.string.raw.c.yaml"
            }
          ]
        },
        {
          "comment": "HLSL-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?:(\\|)|(>))([1-9])?([-+])?\\s*(#(?i:undefined))\\b\\s*\\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "^([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.hlsl"
                }
              ],
              "name": "meta.embedded.string.raw.hlsl.yaml"
            }
          ]
        },
        {
          "comment": "GLSL-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?:(\\|)|(>))([1-9])?([-+])?\\s*(#(?i:undefined))\\b\\s*\\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "^([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.glsl"
                }
              ],
              "name": "meta.embedded.string.raw.glsl.yaml"
            }
          ]
        },
        {
          "comment": "Metal-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?:(\\|)|(>))([1-9])?([-+])?\\s*(#(?i:undefined))\\b\\s*\\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "^([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.metal"
                }
              ],
              "name": "meta.embedded.string.raw.metal.yaml"
            }
          ]
        },
        {
          "comment": "WSGL-formatted block scalar strings",
          "name": "string.quoted.multi.embedded.yaml",
          "begin": "(?:(\\|)|(>))([1-9])?([-+])?\\s*(#(?i:undefined))\\b\\s*\\n?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.block-scalar.literal.yaml"
            },
            "2": {
              "name": "keyword.control.flow.block-scalar.folded.yaml"
            },
            "3": {
              "name": "constant.numeric.indentation-indicator.yaml"
            },
            "4": {
              "name": "storage.modifier.chomping-indicator.yaml"
            },
            "5": {
              "name": "meta.encoding.yaml"
            }
          },
          "end": "^(?=\\S)|(?!\\G)",
          "patterns": [
            {
              "begin": "^([ ]+)(?! )",
              "end": "^(?!\\1|\\s*$)",
              "patterns": [
                {
                  "include": "source.wsgl"
                }
              ],
              "name": "meta.embedded.string.raw.wsgl.yaml"
            }
          ]
        }
      ]
    }
  }
}