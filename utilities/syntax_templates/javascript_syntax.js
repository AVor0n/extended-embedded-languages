/**
 * Build the syntax definition for JavaScript as a host language
 * @param {HostSpec} hostSpec - Specification for the host language
 * @param {EmbeddedSpec[]} embeddedSpecs - Array of data about each
 * embedded language
 * @returns {json} - Json object containing a TextMate language
 * injection
 */
export function buildJavascriptSyntax(hostSpec, embeddedSpecs) {
    const syntax = {
        '$schema': 'https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json',
        'comment': `This file has been automatically generated by syntax_assembler.js
DO NOT HAND EDIT IT - changes will be lost.`,
        'injectionSelector': 'L:source.javascript -string -comment',
        'scopeName': `${hostSpec.embedded_scope}`,
        'patterns': [{'include': '#template-string-with-embedding'}],
        'repository': {
            'template-string-with-embedding': {
                'comment': 'These patterns all match Javascript template strings and select one language.' +
                    'The syntax is injected into https://github.com/microsoft/vscode/blob/main/extensions/javascript/syntaxes/JavaScript.tmLanguage.json',
                'patterns': [],
            },
        },
    };
    embeddedSpecs.forEach((lang) => {
        syntax.repository['template-string-with-embedding'].patterns.push(
                {
                    'comment': `${lang.name}-formatted block scalar strings`,
                    'name': 'string.quoted.multi.embedded.javascript',
                    'begin': String.raw`(?x)(?:(\\|)|(>))([1-9])?([-+])?\\s*(#(?i:${lang.id_choice_re}))\\b\\s*\\n?`,
                    'beginCaptures': {
                        '1': {'name': 'keyword.control.flow.block-scalar.literal.yaml'},
                        '2': {'name': 'keyword.control.flow.block-scalar.folded.yaml'},
                        '3': {'name': 'constant.numeric.indentation-indicator.yaml'},
                        '4': {'name': 'storage.modifier.chomping-indicator.yaml'},
                        '5': {'name': `meta.encoding.yaml`},
                    },
                    'end': '^(?=\\S)|(?!\\G)',
                    'patterns': [
                        {
                            'begin': '^([ ]+)(?! )',
                            'end': '^(?!\\1|\\s*$)',
                            'patterns': [{'include': `${lang.root_scope}`}],
                            'name': `meta.embedded.string.raw.${lang.vsname}.yaml  ${lang.root_scope}`,
                        },
                    ],
                }
        );
    });

    return syntax;
}
